{
  "pgm_significados": {
    "scope": "javascript,typescript",
    "prefix": "pgm_significados",
    "body": [
      "{",
      "  categoria: \"significados\",",
      "  titulo: \"\",",
      "  significados: [\"\", ],",
      "},"
    ],
    "description": "pgm_significados"
  },

  "feedback": {
    "scope": "javascript,typescript",
    "prefix": "feedback",
    "body": [
      "const feedback${1:foo} = {",
      "  FAIL: {",
      "    campo1: 'foo',",
      "  },",
      "  OK: {",
      "    campo1: 'foo',",
      "  },",
      "}",
      "",
      "export { feedback${1:foo} }"
    ],
    "description": "feedback"
  },
  "fake": {
    "scope": "javascript,typescript",
    "prefix": "fake",
    "body": [
      "const fake${1:foo} = {",
      "  FAIL: {",
      "    campo1: 'foo',",
      "  },",
      "  OK: {",
      "    campo1: 'foo',",
      "  },",
      "}",
      "",
      "export { fake${1:foo} }"
    ],
    "description": "fake"
  },

  "jsdoc_FEATURE_feature": {
    "scope": "javascript,typescript",
    "prefix": "jsdoc_FEATURE_feature",
    "body": [
      "/**",
      " * @name name ${foo: MinhaFeatureTS}",
      " * @returns ->",
      " * @infoUsoInterno o artefatoPrincipal na appLib será usado no formato camelCase.",
      " * @infoUsoExterno ao fazer download primeiro replique ex: { camelCaseTS as SnakeCaseTS} depois use no formato SnakeCase",
      " * @exemple FooFeatureTS.method()",
      " */"
    ],
    "description": "jsdoc_FEATURE_feature"
  },

  "nao_usada_var": {
    "prefix": "nao_usada_var",
    "body": [
      "// deno-lint-ignore-file no-unused-vars",
      "",
    ],
    "description": "nao_usada_var"
  },

  "conceito_Completo": {
    "prefix": "conceito_Completo",
    "body": [
      "titulo: \"$1\",",
      "categorias: [\"\", \"\", ],",
      "contexto: \"\",",
      "conceito: \"\",",
      "observacoes: \"#null\",",
      "exemplos: `",
      "",
      "`,",
      ""
    ],
    "description": "conceito_Completo"
  },

  "conceito_Simples": {
    "prefix": "conceito_Simples",
    "body": [
      "{",
      "  titulo: \"$1\",",
      "  categorias: [\"\", \"\"],",
      "  conceito: \"\",",
      "},",
      ""
    ],
    "description": "conceito_Simples"
  },

  "informe_Projeto_Markdown_MD": {
    "prefix": "informe_Projeto_Markdown_MD",
    "body": [
      "# Informe Projeto",
      "",
      "nome: \"${1:'MeuProjetolS: ' MeuProjetoTS}\",",
      "rodar_arquivo: \"`deno task run <path/ARQUIVO.extensao>`\",",
      "rodar_todos_tests: \"`deno task test`\",",
      "",
      "tarefas:",
      "  1. [] - precisa_ser_assincrono: true,",
      "  2. [] -",
      "",
      "",
      "---",
      "",
      ""
    ],
    "description": "informe_Projeto_Markdown_MD"
  },

  "todo_links_provisorios": {
    "prefix": "todo_links_provisorios",
    "body": [
      "// #TODO: imports provisórios do PC -> substituir por linkReal assim que prontos.",
    ],
    "description": "todo_links_provisorios"
  },
  "jsdoc_rzj_author": {
    "prefix": "jsdoc_rzj_author",
    "body": [
      " * @author @RzjProgramador  { @RzjProgramador in -> [ linkedin, twitter, facebook, instagram] }",
      ""
    ],
    "description": "jsdoc_rzj_author"
  },

  "jsdoc_MAIN_libs": {
    "scope": "javascript,typescript",
    "prefix": "jsdoc_MAIN_libs",
    "body": [
      "/**",
      " * @description MAIN *** ENTRADA_PRINCIPAL_DA_LIB",
      " * @author @RzjProgramador  { @RzjProgramador in -> [ linkedin, twitter, facebook, instagram] }",
      " * @returns -> distribui todos links vindos do links.ts",
      " * @default  main busca -> modules/components -> e aqui poderás -> disponibilizar os módulos ao Client da melhor forma seja em : [ link || method () || object ]",
      " */"
    ],
    "description": "jsdoc_MAIN_libs"
  },

  "jsdoc_COMPONENTS_libs": {
    "prefix": "jsdoc_COMPONENTS_libs",
    "body": [
      "/**",
      " * @description links das funcionalidades implantadas em features/feature",
      " * @returns -> disponíveis: [  +  ]",
      " * @example -> import { _foo as foo } -> use foo em todo código e tenha somente esta fonteÚnica para refatorar.",
      " * @default busca -> features/feature",
      "*/"
    ],
    "description": "jsdoc_COMPONENTS_libs"
  },

  "jsdoc_1_UNIQUE_INTERNAL_Deps": {
    "prefix": "jsdoc_1_UNIQUE_INTERNAL_Deps",
    "body": [
      "/**",
      " * @sequencia 01/entityDeps INTERNAS :: traz os imports reais { Uniques *** Deps_Modular_ImportMapJSON }",
      " * @description entityFeatureDeps - #Unique  #Replicas -> leva os links para o _RootDependencias",
      " * @unique fonteUnica para mudar os links reais de dependências: [ internas e externas ]",
      " * @tasksInternal -> <registre aqui os artefatos para disponibilizar acessos. >",
      "*/"
    ],
    "description": "jsdoc_1_UNIQUE_INTERNAL_Deps"
  },

  "jsdoc_1_UNIQUE_EXTERNAL_Deps": {
    "prefix": "jsdoc_1_UNIQUE_EXTERNAL_Deps",
    "body": [
      "/**",
      " * @sequencia 01/replicas EXTERNAS :: traz os imports reais { Uniques *** Deps_Modular_ImportMapJSON }",
      " * @description entityFeatureDeps - #Unique  #Replicas -> leva os links para o _RootDependencias",
      " * @unique fonteUnica para mudar os links reais de dependências: [ internas e externas ]",
      " * @tasksExternal -> <importa aqui os artefatosExternos -> replique com alias <as> e use o alias na app.>",
      "*/"
    ],
    "description": "jsdoc_1_UNIQUE_EXTERNAL_Deps"
  },

  "jsdoc_2_ROOT_DEPS": {
    "prefix": "jsdoc_2_ROOT_DEPS",
    "body": [
      "/**",
      " * @sequencia 02_rootDeps :: mescla os imports reais e Replica { Deps_Modular_ImportMapJSON }",
      " * @tasks MESCLA OS IMPORTS REAIS : [ *traz todos o artefatos de entidadeDeps registrados, *traz todas replicasExternas ]",
      " * @action -> alimenta o MASTER -> *import_map.json para gerar o <@linkVariavel>",
      " */"
    ],
    "description": "jsdoc_2_ROOT_DEPS"
  },

  "jsdoc_3_ROOT_DEPS_FINAL_JSON": {
    "prefix": "jsdoc_3_ROOT_DEPS_FINAL_JSON",
    "body": [
      "/**",
      " * @sequencia 03/FINAL -> import_map :: conecta-se aos mesclados -> sera habilitado por Ultimo pelo settings do editor e Final.",
      " * @tasks [ gerar o <@linkVariavel> ]",
      " * @implements [ { @ variavel SEM barraFinal leva ate arquivo }, { @variável COM barraFinal leva ate diretório }]",
      " * @sets [sempre importar o _rootDeps.deps que traz todas deps registradas : o deno confia o sufixo <.deps.ts> para  intellisense de importações",
      " */"
    ],
    "description": "jsdoc_3_ROOT_DEPS_FINAL_JSON"
  },

  "jsdoc_Root_DEPS_toplevel": {
    "prefix": "jsdoc_Root_DEPS_toplevel",
    "body": [
      "/**",
      " * @description _rootdeps -> alimenta o import_map.json",
      " * @returns -> alimenta o import_map.json -> no qual gera os < @ variável >",
      " * @default traz todas o entidadeDeps de cada feature | entidade",
      "*/"
    ],
    "description": "jsdoc_Root_DEPS_toplevel"
  },


  "comment_Titulo1": {
    "prefix": "comment_Titulo1",
    "body": [
      "// ${1: foo} ============================================================",
      "const ${1:foo} = "
    ],
    "description": "comment_Titulo1"
  },
  "comment_Titulo2": {
    "prefix": "comment_Titulo2",
    "body": [
      "/* <<<",
      "  * $1",
      ">>> */"
    ],
    "description": "comment_Titulo2"
  },
    "superLibsTS_RZ": {
    "prefix": "superLibsTS_RZ",
    "scope": "javascript,typescript",
    "body": [
      "import { $0, } from \"/home/rzj/..gitAll/SuperLibsTS/main.ts\";",
      "",
    ],
    "description": "consoleLog_SuperLibsRZ_TS"
  },
    "consoleLog_SuperLibsRZ_TS": {
    "prefix": "consoleLog_SuperLibsRZ_TS",
    "scope": "javascript,typescript",
    "body": [
      "export { log as Log } from \"/home/rzj/..gitAll/SuperLibsTS/main.ts\";",
      "",
      "Log(\"${1:foo}: \", ${1:foo})"
    ],
    "description": "consoleLog_SuperLibsRZ_TS"
  },
  "try_catch_RZ": {
    "prefix": "try_catch_RZ",
    "body": [
      "try {$1}",
      "catch (err: any) {",
      "  return err.message",
      "}"
    ],
    "description": "try_catch_RZ"
  },
  "deps": {
    "prefix": "deps",
    "body": [
      "/**",
      " * DEPS ENTITY >> $1",
      " */",
      "",
      "// export * from \".\""
    ],
    "description": "deps"
  },
  "comment_1": {
  "prefix": "comment_1",
  "body": [
    "/**",
    " * $1",
    " *",
    " */"
  ],
  "description": "comment_1"
},
  "model_class_custom_error_ts": {
    "prefix": "model_class_custom_error_ts",
    "body": [
      "export class $1InvalidEntity extends Error {",
      "  constructor(msg: string) {",
      "    super(`\\${msg}`);",
      "    this.name = `InvalidEntity`;",
      "  }",
      "}"
    ],
    "description": "model_class_custom_error_ts"
  },
  "jsdoc_LIB_INDEX": {
    "prefix": "jsdoc_LIB_INDEX",
    "body": [
      "/**",
      " * @description disponibiliza o objeto ...TODO",
      " * @returns metodos disponiveis: [] +",
      " * @default nomeado com _anderline, replique renomeando sem o _ -> e use a replica.",
      " * @exemple {_foo as foo} :: foo()",
      " */"
    ],
    "description": "jsdoc_LIB_INDEX"
  },
  "jsdoc doc ": {
    "prefix": "jsdoc doc",
    "body": [
      "/**",
      " * @description este metodo faz ...",
      " * @param param0 $1 1º { texto, numero }",
      " * @returns TipoRetorno",
      " * @exemple funcaoNome ({ texto: 'foo', numero: 10 })",
      " */",
      ""
    ],
    "description": "jsdoc doc "
  },

  "test_deno": {
    "prefix": "test_deno",
    "scope": "javascript,typescript",
    "body": [
      "import { expect } from \"https://deno.land/x/expect@v0.2.10/expect.ts\";",
      "",
      "const sut = true",
      "",
      "Deno.test({",
      "  name: \"[ FAIL ] deve retornar $1.\",",
      "  only: false,",
      "  async fn() {",
      "",
      "  expect(true).toEqual(true);",
      "  },",
      "",
      "});",
      "",
      "Deno.test(\"[ OK ] deve retornar .\", () => {",
      "",
      "  expect(true).toEqual(true);",
      "});",
      "",
      "/* -- TESTER_CONSOLE -- */",
      "",
      "async function tester_ () {}",
      "// tester_ ();",
      "",
      "export default 1;"
    ],
    "description": "test_deno"
  },

  "test_deno_suite_only": {
    "prefix": "test_deno_suite_only",
    "scope": "javascript,typescript",
    "body": [
      "Deno.test({",
      "  name: \"[ FAIL ] deve retornar $1.\",",
      "  only: false,",
      "  async fn() {",
      "",
      "  expect(true).toEqual(true);",
      "  },",
      "",
      "});"
    ],
    "description": "test_deno_suite_only"
  },

  "test_deno_suite": {
    "prefix": "test_deno_suite",
    "body": [
      "Deno.test(\"[ OK ] deve retornar $1.\", () => {",
      "",
      "  expect(true).toEqual(true);",
      "});"
    ],
    "description": "test_deno_suite"
  },

  "deno_test_import_expect": {
    "prefix": "deno_test_import_expect",
    "body": [
      "import { expect } from \"https://deno.land/x/expect@v0.2.10/expect.ts\";"
    ],
    "description": "deno_test_import_expect"
  },

  "test_deno_promise_resolvida": {
    "prefix": "test_deno_promise_resolvida",
    "body": [
      "expect(Promise.resolve(PROMESSA)).resolves.toEqual(RESULTADO_ESPERADO);"
    ],
    "description": "test_deno_promise_resolvida"
  },
  "test_deno_promise_rejeitada": {
    "prefix": "test_deno_promise_rejeitada",
    "body": [
      "expect(Promise.resolve(PROMESSA)).rejects.toEqual(RESULTADO_ESPERADO);"
    ],
    "description": "test_deno_promise_rejeitada"
  },

  "ignore_ts_erros": {
    "scope": "javascript,typescript",
    "prefix": "ignore_ts_erros",
    "body": [
      "//@ts-ignore"
    ],
    "description": "ignore_ts_erros"
  },
  "auto_export_classe_instanciada_em_objeto": {
    "scope": "javascript,typescript",
    "prefix": "auto_export_classe_instanciada_em_objeto",
    "body": [
      "export default new ${1}()"
    ],
    "description": "auto_export_classe_instanciada_em_objeto"
  },
  "tipagem_js": {
    "scope": "javascript,typescript",
    "prefix": "type",
    "body": [
      "/**",
      " * descricao :: $0",
      " * @param {$1} $2 ",
      " * @param {string} nomeParam // exemplo",
      " */",
      "",
      ""
    ],
    "description": "tipagem_js"
  },
  "tester_test_node_rzj": {
    "scope": "javascript,typescript",
    "prefix": "tester test node",
    "body": [
      "// import { test } from 'node:test'",
      "import assert from 'assert'",
      "import { vi, describe, it, test } from 'vitest'",
      "",
      "const makeSut = null",
      "const makeFakeEntityInstanceOne = null",
      "const makeFakeEntityInstanceTwo = null",
      "",
      "describe('_ >> [Sucess]', () => {",
      "const sut = makeSut",
      "",
      "test(`deve _.`, async () => {",
      "const current = null",
      "const expected = null",
      "// Log('OBJ CRIADO >> ', current)",
      "// Log('A RESPOSTA DA EXPECTATIVA SERÁ >> ', expected)",
      "assert(expected === true)",
      "})",
      "",
      "})",
      "",
      "describe.todo('_ >> [Fail]', () => {",
      "const sut = makeSut",
      "",
      "test(`nao deve _.`, async () => {",
      "const current = null",
      "const expected = null",
      "// Log('OBJ CRIADO >> ', current)",
      "// Log('A RESPOSTA DA EXPECTATIVA SERÁ >> ', expected)",
      "assert(expected === true)",
      "})",
      "",
      "})",
      ""
    ],
    "description": "test tester node"
  },
  "suite_test_it_NODE": {
    "scope": "javascript,typescript",
    "prefix": "suite test it",
    "body": [
      "test(`deve _.`, async () => {",
      "const current = null",
      "const expected = null",
      "// Log('OBJ CRIADO >> ', current)",
      "// Log('A RESPOSTA DA EXPECTATIVA SERÁ >> ', expected)",
      "assert(expected === true)",
      "})"
    ],
    "description": "suite_test_it_NODE"
  },
  "class": {
    "prefix": "export class - typescript",
    "scope": "javascript,typescript",
    "body": [
      "export class ${TM_DIRECTORY/^.+\\\\/(.*)$/$1/}$1 {",
      "    constructor() {}",
      "}"
    ],
    "description": "class"
  },
  "interface": {
    "prefix": "export interface - typescript",
    "scope": "javascript,typescript",
    "body": [
      "export interface ${TM_DIRECTORY/^.+\\\\/(.*)$/$1/}$1 {$2}"
    ],
    "description": "interface"
  },
  "noExport_DEFAULT_1": {
    "prefix": "noExport_DEFAULT_1",
    "scope": "javascript,typescript",
    "body": [
      "",
      "export default 1",
      ""
    ],
    "description": "noExport_DEFAULT_1"
  },
  "demonstracao_reduce_async": {
    "scope": "javascript,typescript",
    "prefix": "demonstracao_reduce_async",
    "body": [
      "// await listPipeClienteFisico.reduce(async (acc: any, fn) => await fn(acc), args)",
      "// detalhe: tipar acc: any, async na HigherOrderFunctions FuncaoDeOrdemSuperior do reduce espera para acão final."
    ],
    "description": "demonstracao_reduce_async"
  },
  "pipe_async": {
    "prefix": "pipe_async",
    "scope": "javascript,typescript",
    "body": [
      "const nameFN = async (args: any) => {",
      "  return await arrayTarget.reduce(async (acc: any, fn) => await fn(acc), args)",
      "}"
    ],
    "description": "pipe_async"
  },
  "todo_futuro": {
  "prefix": "todo_futuro",
  "body": [
    "// -- #futuro::> reservado para $1  . --",
  ],
  "description": "todo_futuro"
  },
  "todo_naoImplementado": {
    "prefix": "todo_naoImplementado",
    "body": [
      "// -- #TODO: NaoImplementado --",
    ],
    "description": "todo_naoImplementado"
  },
  "todo_RetornandoErro": {
    "prefix": "todo_RetornandoErro",
    "body": [
      "// -- #TODO: RetornandoErro --",
    ],
    "description": "todo_RetornandoErro"
  },
  "todo_MelhorarNoFuturo": {
    "prefix": "todo_MelhorarNoFuturo",
    "body": [
      "// -- #TODO: MelhorarNoFuturo --",
    ],
    "description": "todo_MelhorarNoFuturo"
  },
  "modelo_cleanRepoTS": {
    "prefix": "modelo_cleanRepoTS",
    "body": [
      "function cleanRepo() {",
      "  repoInUse.memory.items = []!",
      "}",
      "// -- modelo limpar repo inmemory -- como ele é o de test tenho que só mandar limpar. --"
    ],
    "description": "modelo_cleanRepoTS"
  },
}